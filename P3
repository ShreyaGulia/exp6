const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const app = express();
const PORT = 3000;

app.use(bodyParser.json());

mongoose.connect('mongodb://127.0.0.1:27017/bankdb', {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

const userSchema = new mongoose.Schema({
  name: String,
  balance: Number
});

const User = mongoose.model('User', userSchema);

app.post('/create-users', async (req, res) => {
  await User.deleteMany({});
  const users = await User.insertMany([
    { name: 'Alice', balance: 1000 },
    { name: 'Bob', balance: 500 }
  ]);
  res.status(201).json({ message: 'Users created', users });
});

app.post('/transfer', async (req, res) => {
  const { fromUserId, toUserId, amount } = req.body;
  if (!fromUserId || !toUserId || !amount)
    return res.status(400).json({ message: 'Missing required fields' });

  const sender = await User.findById(fromUserId);
  const receiver = await User.findById(toUserId);

  if (!sender || !receiver)
    return res.status(404).json({ message: 'User not found' });

  if (sender.balance < amount)
    return res.status(400).json({ message: 'Insufficient balance' });

  sender.balance -= amount;
  receiver.balance += amount;

  await sender.save();
  await receiver.save();

  res.json({
    message: `Transferred $${amount} from ${sender.name} to ${receiver.name}.`,
    receiverBalance: receiver.balance
  });
});

app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
